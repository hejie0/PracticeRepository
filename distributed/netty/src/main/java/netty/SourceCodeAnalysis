1、创建EventLoopGroup
    1.1 默认cpu * 2 线程数 threadCount，假设threadCount = 16
    1.2 创建DefaultThreadFactory     newThread(Runnable) FastThreadLocalThread
    1.3 创建ThreadPerTaskExecutor将DefaultThreadFactory放入，execute == newThread.start()
    1.4 创建EventExecutor[threadCount]数组用于存储NioEventLoop
    1.5 创建NioEventLoop构造创建 MpscQueue，放入Executor，SelectorProvider，（包装selector），（原unwrappedSelector）
            netty使用SelectedSelectionKeySetSelector包装（原selector），并将（原selector）的publicKeys、publicSelectedKeys属性反射为SelectedSelectionKeySet
    1.6 创建EventExecutorChooser，用于选择EventExecutor[threadCount]数组数据 next()，
            threadCount能被2整除，则创建 PowerOfTwoEventExecutorChooser，next()采用位运算，遍历数组
            0001     1
            1111     15
            0001     1

            0010     2
            1111     15
            0010     2

            10000    16
            01111    15
            00000    0

            10001    17
            01111    15
            00001    1

            threadCount不能被2整除，则创建 GenericEventExecutorChooser，next()采用取余算法，遍历数组
            1 % 16 = 1
            2 % 16 = 2
            16 % 16 = 0
            17 % 16 = 1

2、ServerBootstrap.bind(port)
    2.1 【initAndRegister】
        创建NioServerSocketChannel，构造创建javaChannel并设置为非阻塞，创建id，unsafe，pipeline
        构造创建NioServerSocketChannelConfig，放入javaChannel和NioChannel，
        config中构造创建AdaptiveRecvByteBufAllocator

        【init】
        为NioChannel设置options，attr，pipeline注册ServerBootstrapAcceptor，

        【register】
        EventLoopGroup.next() NioEventLoop，创建DefaultChannelPromise存入NioChannel和NioEventLoop
        unsafe注册NioEventLoop和DefaultChannelPromise == promise.channel().unsafe().register(this, promise)

        AbstractChannel.AbstractUnsafe.register，NioServerSocketChannel存入eventLoop，
        使用eventLoop.inEventLoop判断当前线程是否是eventLoop线程，因为第一次eventLoop.thread属性为null，
        所以使用eventLoop.execute执行，将创建的（runnable register0任务）添加到taskMpsQ任务队列，
        然后启动线程SingleThreadEventExecutor.doStartThread，eventLoop.thread 存入 currentStartThread，
        这个线程死循环selector.select，并处理processSelectedKeys，然后处理taskMpsQ任务，[查看ioRatio文件] 继续循环selector.select。

        【处理事件】
        NioEventLoop.processSelectedKey(SelectionKey, AbstractNioChannel)     unsafe.read();
            NioServerSocketChannel.unsafe.read() == NioMessageUnsafe.read()    【server数据读取核心方法，入口 pipeline.fireXXX】
               doReadMessages()接收一个（SocketChannel|client），创建NioSocketChannel并存入SocketChannel
               pipeline.fireChannelRead(readBuf.get(i)) == ServerBootstrapAcceptor.channelRead
               childGroup.register(child)使用childGroup注册NioSocketChannel，注册完成后childGroup的eventLoop死循环selector.select

            NioSocketChannel.unsafe.read() == NioByteUnsafe.read()             【client数据读取核心方法，入口 pipeline.fireXXX】
               pipeline.fireChannelRead(byteBuf) -> DefaultChannelPipeline.fireChannelRead
               -> AbstractChannelHandlerContext.fireChannelRead -> AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext, Object)
               -> AbstractChannelHandlerContext.invokeChannelRead(Object) -> InboundHandler1自己的handler
               -> AbstractChannelHandlerContext.fireChannelRead -> AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext, Object)
               -> AbstractChannelHandlerContext.invokeChannelRead(Object) -> InboundHandler2自己的handler，这样一直传播下去

        【扩展channel != AbstractNioChannel】
        NioEventLoop.processSelectedKey(SelectionKey, NioTask<SelectableChannel>)  NioEventLoop支持register自己的SelectableChannel，
        如ServerSocketChannel等，并自定义处理NioTask.channelReady和channelUnregistered。SelectionKey.isConnectable

        【执行taskMpsQ任务，如register0】
        执行taskMpsQ任务：AbstractChannel.AbstractUnsafe.register0
            -> AbstractChannel.doRegister -> AbstractNioChannel.doRegister   javaChannel().register(eventLoop().unwrappedSelector(), 0, this);【注册完成】

        pipeline.invokeHandlerAddedIfNeeded();  将Handler添加addLast到ChannelHandlerContext中，server端添加handler，client添加childHandler
        pipeline.fireChannelRegistered();
        pipeline.fireChannelActive();

    2.2 doBind0
        使用NioServerSocketChannel.eventLoop执行


